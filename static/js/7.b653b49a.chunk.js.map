{"version":3,"sources":["components/Messages/Messages.jsx","components/Messages/index.js","components/MessageForm/MessageForm.jsx","components/MessageForm/index.js","pages/MessagesPage/MessagesPage.jsx","pages/MessagesPage/index.js"],"names":["Messages","props","messages","totalCount","messagesElement","map","message","connect","state","messagesPage","getMessages","userId","useEffect","console","log","MessageForm","handleSendMessage","validationSchema","Yup","shape","required","max","useForm","mode","resolver","yupResolver","register","formState","handleSubmit","errors","touchedFields","onSubmit","className","style","inCorrect","login","correct","dialogsPage","items","sendMessage","data","Number","MessagesPage","match","params"],"mappings":"+LAkBeA,G,OAdE,SAACC,GAAW,IACpBC,EAAwBD,EAAxBC,SAAUC,EAAcF,EAAdE,WACXC,EAAkBF,EAASG,KAAI,SAAAC,GAAO,OAAI,8BAAOA,MAEvD,OAAQ,6BACGF,EACD,yHAA8B,2BAAID,MCc7BI,eAPK,SAACC,GAAD,MAClB,CACIN,SAAUM,EAAMC,aAAaP,SAC7BC,WAAYK,EAAMC,aAAaN,cAIG,CAACO,iBAA1BH,EAnBS,SAACN,GAAW,IAC7BU,EAA6CV,EAA7CU,OAAQT,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,WAAYO,EAAeT,EAAfS,YAOrC,OANAE,qBAAU,WACRC,QAAQC,IAAI,kHAAyBH,GACrCD,EAAYC,KAEZ,IAEM,kBAAC,EAAD,CAAUT,SAAUA,EACVC,WAAYA,O,2CCsBjBY,EA5BK,SAACd,GACiBA,EAA7BU,OADuB,IACfK,EAAqBf,EAArBe,kBACTC,EAAmBC,MAAaC,MAAM,CAC1Cb,QAASY,MACIE,SAAS,4LACTC,IAAI,IAAK,2GALK,EAQiBC,YAAQ,CAClDC,KAAM,SACNC,SAAUC,YAAYR,KAFlBS,EARqB,EAQrBA,SAAUC,EARW,EAQXA,UAAWC,EARA,EAQAA,aAKtBC,EAAyBF,EAAzBE,OAAQC,EAAiBH,EAAjBG,cAGb,OACI,0BAAMC,SAAUH,EAAaZ,IAC3B,6BACE,4CAAUgB,UAAWH,EAAOvB,SAAW2B,IAAMC,WAAYJ,EAAcK,OAASF,IAAMG,SACxEV,EAAS,aACZG,EAAOvB,SAAW,2BAAIuB,EAAOvB,QAAQA,UAElD,mJCJOC,eAPK,SAACC,GAAD,MAClB,CACIN,SAAUM,EAAM6B,YAAYnC,SAASoC,MACrCnC,WAAYK,EAAM6B,YAAYnC,SAASC,cAIL,CAACO,gBAAa6B,iBAAvChC,EAtBY,SAACN,GAAW,IAChCU,EAAuBV,EAAvBU,OAAQ4B,EAAetC,EAAfsC,YAWf,OAAQ,kBAAC,EAAD,CAAavB,kBATK,SAACwB,GACzB3B,QAAQC,IAAI0B,EAAKlC,SACjBO,QAAQC,IAAIH,GACZ4B,EAAYE,OAAO9B,GAAS6B,EAAKlC,eCEtBoC,EATM,SAACzC,GAAW,IACxB0C,EAAS1C,EAAT0C,MAEP,OAAQ,6BACG,kBAAC,EAAD,CAAUhC,OAAQgC,EAAMC,OAAOjC,SAC/B,kBAAC,EAAD,CAAaA,OAAQgC,EAAMC,OAAOjC,WCRhC+B","file":"static/js/7.b653b49a.chunk.js","sourcesContent":["import React from \"react\";\nimport style from \"./Messages.module.scss\";\nimport PropTypes from \"prop-types\";\n\nconst Messages = (props) => {\n  const {messages, totalCount} = props;\n  const messagesElement = messages.map(message => <span>{message}</span>);\n  \n  return (<div>\n            {messagesElement}\n            <span>Всего сообщений: </span><b>{totalCount}</b>\n          </div>);\n};\n\n// Messages.propTypes = {\n//   message: PropTypes.string.isRequired,\n// };\n\nexport default Messages;\n","import React, {useEffect, useState} from \"react\";\nimport {getMessages} from \"../../redux/messages-reducer\";\nimport { connect } from \"react-redux\";\nimport Messages from \"./Messages\";\n\nconst MessagesContainer = (props) => {\n  const {userId, messages, totalCount, getMessages} = props;\n  useEffect(() => {\n    console.log(\"Получить сообщения с \", userId);\n    getMessages(userId);\n    \n  },[]);\n  \n  return (<Messages messages={messages}\n                    totalCount={totalCount} />)\n}\n\nlet mapStateToProps = (state) => (\n    {\n        messages: state.messagesPage.messages,\n        totalCount: state.messagesPage.totalCount,\n    }\n  )\n  \n  export default connect(mapStateToProps, {getMessages})(MessagesContainer);","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport style from \"./MessageForm.module.scss\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n\n\nconst MessageForm = (props) => {\n  const {userId, handleSendMessage} = props;\n  const validationSchema = Yup.object().shape({\n    message: Yup.string()\n                .required('Нельзя отправить пустое сообщение!')\n                .max(100, 'Максимум 100 символов'),\n  });\n\n  const { register, formState, handleSubmit } = useForm({\n      mode: 'onBlur',\n      resolver: yupResolver(validationSchema)\n  });\n\n  const {errors, touchedFields} = formState;\n\n\n    return (\n        <form onSubmit={handleSubmit(handleSendMessage)}>\n          <div>\n            <textarea className={errors.message && style.inCorrect ||touchedFields.login && style.correct }\n                      {...register(\"message\")} />\n                      {errors.message && <p>{errors.message.message}</p>}\n          </div>\n          <button>Отправить сообщение</button>\n        </form>\n      );\n}\n\nexport default MessageForm;","import React, {useEffect, useState} from \"react\";\nimport {getMessages, sendMessage} from \"../../redux/messages-reducer\";\nimport { connect } from \"react-redux\";\nimport MessageForm from \"./MessageForm\";\n\nconst MessageFormContainer = (props) => {\n  const {userId, sendMessage} = props;\n\n  const handleSendMessage = (data) => {\n    console.log(data.message);\n    console.log(userId);\n    sendMessage(Number(userId), data.message);\n  }\n  // useEffect(() => {\n  //   debugger\n  //   console.log(\"перерисовался\")\n  // },[])\n  return (<MessageForm handleSendMessage={handleSendMessage} />)\n}\n\nlet mapStateToProps = (state) => (\n    {\n        messages: state.dialogsPage.messages.items,\n        totalCount: state.dialogsPage.messages.totalCount,\n    }\n  )\n  \n  export default connect(mapStateToProps, {getMessages, sendMessage})(MessageFormContainer);","import React from \"react\";\nimport Messages from \"../../components/Messages\";\nimport MessageForm from \"../../components/MessageForm\";\n\nconst MessagesPage = (props) => {\n  const {match} = props;\n  \n  return (<div>\n             <Messages userId={match.params.userId} />\n             <MessageForm userId={match.params.userId} />\n           </div>)\n}\n\nexport default MessagesPage;","import MessagesPage from \"./MessagesPage\";\nexport default MessagesPage;"],"sourceRoot":""}